import 'cross-fetch/polyfill';
import { SubscriptionClient } from 'subscriptions-transport-ws';
import { IApiHeaders, IApiOptions, IApiSubscriptionOptions, IFetchOptions, IGraphQLVariables, IWebhookRequest } from './types';
import { ExecutionResult } from 'graphql';
export declare class Api {
    static composeHeaders(...headersArr: IApiHeaders[]): Promise<RequestInit['headers']>;
    readonly subscriptionClient: SubscriptionClient;
    private readonly url;
    private readonly headers;
    private readonly errorHandler;
    private readonly requestHandler;
    private readonly responseHandler;
    constructor(options: IApiOptions);
    request(query: string, variables?: IGraphQLVariables, fetchOptions?: IFetchOptions): Promise<ExecutionResult>;
    query(query: string, variables?: IGraphQLVariables, options?: IFetchOptions): Promise<ExecutionResult>;
    mutation(query: string, variables?: IGraphQLVariables, options?: IFetchOptions): Promise<ExecutionResult>;
    subscription(query: string, options?: IApiSubscriptionOptions): () => void;
    closeSubscriptionConnection(): void;
    invoke(functionName: string, request: IWebhookRequest, options?: IFetchOptions): Promise<Response>;
    private catchApiGraphQLError;
    private prepareSubscriptionClient;
}
//# sourceMappingURL=Api.d.ts.map