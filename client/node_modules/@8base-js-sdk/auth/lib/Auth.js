"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const Auth0Strategy_1 = require("./Auth0Strategy");
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const StorageFacade_1 = require("./StorageFacade");
const DEFAULT_STORAGE_KEY = 'auth_storage';
class Auth {
    constructor(options, storage, storageKey = DEFAULT_STORAGE_KEY) {
        const { settings } = options;
        this.authStrategy = new Auth0Strategy_1.Auth0Strategy(settings);
        this.emitter = new eventemitter3_1.default();
        if (storage) {
            this.storage = new StorageFacade_1.StorageFacade(storage, storageKey);
        }
        this.subscribeOnEvents(options);
    }
    on(event, callback) {
        this.emitter.on(event, callback);
    }
    authorize(provider, options) {
        this.authStrategy.authorize(provider, options);
    }
    getAuthorizedData() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let auth0Data = null;
            try {
                auth0Data = yield ((_a = this.authStrategy) === null || _a === void 0 ? void 0 : _a.getAuthorizedData());
            }
            catch (e) {
                this.emitter.emit(types_1.AuthEvent.AuthorizeFailed, e);
            }
            if (auth0Data) {
                const authState = this.authStrategy.convertAuthDataToState(auth0Data);
                if (this.storage) {
                    this.storage.setState(authState);
                }
                this.emitter.emit(types_1.AuthEvent.Authorized, auth0Data);
                return auth0Data;
            }
            return null;
        });
    }
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            let auth0Data = null;
            try {
                auth0Data = yield this.authStrategy.refresh();
            }
            catch (e) {
                this.emitter.emit(types_1.AuthEvent.RefreshFailed, e);
            }
            if (auth0Data) {
                const authState = this.authStrategy.convertAuthDataToState(auth0Data);
                if (this.storage) {
                    this.storage.setState(authState);
                }
                this.emitter.emit(types_1.AuthEvent.Refreshed, auth0Data);
                return auth0Data;
            }
            return null;
        });
    }
    forgotPassword(email) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authStrategy.forgotPassword(email);
        });
    }
    signOut(options) {
        var _a;
        if (this.storage) {
            this.storage.purgeState();
        }
        this.emitter.emit(types_1.AuthEvent.SignedOut);
        (_a = this.authStrategy) === null || _a === void 0 ? void 0 : _a.signOut(options);
    }
    subscribeOnEvents(options) {
        const { onAuthorized, onAuthorizeFailed, onRefreshed, onRefreshFailed, onSignedOut, } = options;
        if (typeof onAuthorized === 'function') {
            this.emitter.on(types_1.AuthEvent.Authorized, onAuthorized);
        }
        if (typeof onAuthorizeFailed === 'function') {
            this.emitter.on(types_1.AuthEvent.AuthorizeFailed, onAuthorizeFailed);
        }
        if (typeof onRefreshed === 'function') {
            this.emitter.on(types_1.AuthEvent.Refreshed, onRefreshed);
        }
        if (typeof onRefreshFailed === 'function') {
            this.emitter.on(types_1.AuthEvent.RefreshFailed, onRefreshFailed);
        }
        if (typeof onSignedOut === 'function') {
            this.emitter.on(types_1.AuthEvent.SignedOut, onSignedOut);
        }
    }
}
exports.Auth = Auth;
//# sourceMappingURL=Auth.js.map