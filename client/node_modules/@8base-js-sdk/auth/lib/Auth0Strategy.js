"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const auth0_js_1 = __importDefault(require("auth0-js"));
class Auth0Strategy {
    constructor(settings) {
        const { clientId, domain, redirectUri, logoutRedirectUri } = settings;
        this.logoutRedirectUri = logoutRedirectUri;
        this.auth0Client = new auth0_js_1.default.WebAuth({
            clientID: clientId,
            domain,
            redirectUri,
            responseType: 'token id_token',
            scope: 'openid email profile',
        });
    }
    authorize(provider, options = {}) {
        if (provider) {
            options = Object.assign(Object.assign({}, options), { connection: provider });
        }
        this.auth0Client.authorize(options);
    }
    getAuthorizedData() {
        return __awaiter(this, void 0, void 0, function* () {
            const auth0Data = yield new Promise((resolve, reject) => {
                this.auth0Client.parseHash((error, auth0Data) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(auth0Data);
                    }
                });
            });
            return auth0Data;
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const auth0Data = yield new Promise((resolve, reject) => {
                this.auth0Client.checkSession({ usePostMessage: true }, (error, result) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            return auth0Data;
        });
    }
    signOut(options = {}) {
        this.auth0Client.logout(Object.assign(Object.assign({}, options), { returnTo: this.logoutRedirectUri }));
    }
    forgotPassword(email) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.auth0Client.changePassword({
                    connection: 'Username-Password-Authentication',
                    email,
                }, error => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(email);
                    }
                });
            });
        });
    }
    convertAuthDataToState(auth0Data) {
        var _a, _b;
        const { idToken, accessToken, expiresIn, idTokenPayload } = auth0Data;
        return {
            idToken: idToken || '',
            accessToken: accessToken || '',
            expiresIn: expiresIn || 0,
            email: ((_a = idTokenPayload) === null || _a === void 0 ? void 0 : _a.email) || '',
            emailVerified: (_b = idTokenPayload) === null || _b === void 0 ? void 0 : _b.email_verified,
            idTokenPayload: idTokenPayload || null,
        };
    }
}
exports.Auth0Strategy = Auth0Strategy;
//# sourceMappingURL=Auth0Strategy.js.map