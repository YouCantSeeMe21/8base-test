{"remainingRequest":"C:\\8base-starter-app\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\8base-starter-app\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\8base-starter-app\\client\\src\\store\\modules\\session.js","dependencies":[{"path":"C:\\8base-starter-app\\client\\src\\store\\modules\\session.js","mtime":1622284092863},{"path":"C:\\8base-starter-app\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\8base-starter-app\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\8base-starter-app\\client\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\8base-starter-app\\\\client\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { auth, api } from \"@/8base\";\nimport { CURRENT_USER_QUERY } from \"@/utils/graphql\";\n/**\r\n * State maintains the authentication state using Vuex.\r\n * Determines \"authenticated\" status by presence of\r\n * \"idToken\" in local storage while storing the\r\n * idTokens value returned by the auth provider.\r\n */\n\nvar state = {\n  authenticated: !!localStorage.getItem(\"id_token\"),\n  idToken: localStorage.getItem(\"id_token\")\n};\n/**\r\n * State getters for retrieving state properties.\r\n */\n\nvar getters = {\n  /**\r\n   * Getter for retrieving authenticated status.\r\n   */\n  authenticated: function authenticated(state) {\n    return state.authenticated;\n  },\n\n  /**\r\n   * Getter for retrieving ID token.\r\n   */\n  idToken: function idToken(state) {\n    return state.idToken;\n  }\n};\n/**\r\n * State mutations for setting state properties.\r\n */\n\nvar mutations = {\n  /**\r\n   * Updates the Vuex state's authentication data\r\n   */\n  authenticated: function authenticated(state, authData) {\n    state.authenticated = true;\n    state.idToken = authData.idToken;\n    localStorage.setItem(\"id_token\", state.idToken);\n  },\n\n  /**\r\n   * Cleans Vuex state's authentication data\r\n   */\n  logout: function logout(state) {\n    state.authenticated = false;\n    state.idToken = false;\n    localStorage.removeItem(\"id_token\");\n  }\n};\n/**\r\n * State actions for async and sync state related functions.\r\n */\n\nvar actions = {\n  /**\r\n   * launches Auth0 authentication\r\n   */\n  login: function login() {\n    auth.authorize();\n  },\n\n  /**\r\n   * Logs out and updates Vuex state's authentication data\r\n   */\n  logout: function logout(_ref) {\n    var commit = _ref.commit;\n    commit(\"logout\");\n    auth.signOut();\n  },\n\n  /**\r\n   * Checks if user is registered in 8base, if not signs up the user.\r\n   * Afterwards stores the authentication data in Vuex State.\r\n   *\r\n   * This function utilizes methods available on the auth model that is\r\n   * stored in utils/auth.js.\r\n   */\n  handleAuthentication: function () {\n    var _handleAuthentication = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref2) {\n      var commit, authResult, idToken, idTokenPayload, userResponse, email;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context.next = 3;\n              return auth.getAuthorizedData();\n\n            case 3:\n              authResult = _context.sent;\n              idToken = authResult.idToken, idTokenPayload = authResult.idTokenPayload;\n              /**\r\n               * Check if user exists in 8base.\r\n               */\n\n              _context.next = 7;\n              return api.request(CURRENT_USER_QUERY, {},\n              /**\r\n               * Auth headers for communicating with the 8base API.\r\n               */\n              {\n                headers: {\n                  Authorization: \"Bearer \".concat(idToken)\n                }\n              });\n\n            case 7:\n              userResponse = _context.sent;\n\n              if (!(userResponse.errors && userResponse.errors.length !== 0)) {\n                _context.next = 12;\n                break;\n              }\n\n              email = idTokenPayload.email;\n              _context.next = 12;\n              return auth.signUpWithToken({\n                email: email\n              }, idToken);\n\n            case 12:\n              /* commit the auth data to state */\n              commit(\"authenticated\", authResult);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function handleAuthentication(_x) {\n      return _handleAuthentication.apply(this, arguments);\n    }\n\n    return handleAuthentication;\n  }()\n};\nexport default {\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["C:\\8base-starter-app\\client\\src\\store\\modules\\session.js"],"names":["auth","api","CURRENT_USER_QUERY","state","authenticated","localStorage","getItem","idToken","getters","mutations","authData","setItem","logout","removeItem","actions","login","authorize","commit","signOut","handleAuthentication","getAuthorizedData","authResult","idTokenPayload","request","headers","Authorization","userResponse","errors","length","email","signUpWithToken"],"mappings":"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","sourcesContent":["import { auth, api } from \"@/8base\";\r\nimport { CURRENT_USER_QUERY } from \"@/utils/graphql\";\r\n\r\n/**\r\n * State maintains the authentication state using Vuex.\r\n * Determines \"authenticated\" status by presence of\r\n * \"idToken\" in local storage while storing the\r\n * idTokens value returned by the auth provider.\r\n */\r\nconst state = {\r\n  authenticated: !!localStorage.getItem(\"id_token\"),\r\n  idToken: localStorage.getItem(\"id_token\")\r\n};\r\n/**\r\n * State getters for retrieving state properties.\r\n */\r\nconst getters = {\r\n  /**\r\n   * Getter for retrieving authenticated status.\r\n   */\r\n  authenticated(state) {\r\n    return state.authenticated;\r\n  },\r\n  /**\r\n   * Getter for retrieving ID token.\r\n   */\r\n  idToken(state) {\r\n    return state.idToken;\r\n  }\r\n};\r\n/**\r\n * State mutations for setting state properties.\r\n */\r\nconst mutations = {\r\n  /**\r\n   * Updates the Vuex state's authentication data\r\n   */\r\n  authenticated(state, authData) {\r\n    state.authenticated = true;\r\n    state.idToken = authData.idToken;\r\n\r\n    localStorage.setItem(\"id_token\", state.idToken);\r\n  },\r\n  /**\r\n   * Cleans Vuex state's authentication data\r\n   */\r\n  logout(state) {\r\n    state.authenticated = false;\r\n    state.idToken = false;\r\n\r\n    localStorage.removeItem(\"id_token\");\r\n  }\r\n};\r\n/**\r\n * State actions for async and sync state related functions.\r\n */\r\nconst actions = {\r\n  /**\r\n   * launches Auth0 authentication\r\n   */\r\n  login() {\r\n    auth.authorize();\r\n  },\r\n  /**\r\n   * Logs out and updates Vuex state's authentication data\r\n   */\r\n  logout({ commit }) {\r\n    commit(\"logout\");\r\n\r\n    auth.signOut();\r\n  },\r\n  /**\r\n   * Checks if user is registered in 8base, if not signs up the user.\r\n   * Afterwards stores the authentication data in Vuex State.\r\n   *\r\n   * This function utilizes methods available on the auth model that is\r\n   * stored in utils/auth.js.\r\n   */\r\n  async handleAuthentication({ commit }) {\r\n    const authResult = await auth.getAuthorizedData();\r\n    const { idToken, idTokenPayload } = authResult;\r\n    /**\r\n     * Check if user exists in 8base.\r\n     */\r\n    const userResponse = await api.request(\r\n      CURRENT_USER_QUERY,\r\n      {},\r\n      /**\r\n       * Auth headers for communicating with the 8base API.\r\n       */\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${idToken}`\r\n        }\r\n      }\r\n    );\r\n    /**\r\n     * If user doesn't exist, an error will be\r\n     * thrown, which then the new user can be\r\n     * created using the authResult values.\r\n     */\r\n    if (userResponse.errors && userResponse.errors.length !== 0) {\r\n      const { email } = idTokenPayload;\r\n\r\n      await auth.signUpWithToken({ email }, idToken);\r\n    }\r\n    /* commit the auth data to state */\r\n    commit(\"authenticated\", authResult);\r\n  }\r\n};\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions\r\n};\r\n"]}]}