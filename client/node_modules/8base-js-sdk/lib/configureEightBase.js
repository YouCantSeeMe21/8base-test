"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const auth_1 = __importDefault(require("@8base-js-sdk/auth"));
const api_1 = __importDefault(require("@8base-js-sdk/api"));
const error_codes_1 = __importDefault(require("@8base/error-codes"));
const ExtendedAuth_1 = require("./ExtendedAuth");
function configureEightBase(options) {
    const { workspaceId, Auth: authOptions, Api: apiOptions, storageKey, autoTokenRefresh = false, } = options;
    let { storage } = options;
    let apiHeaders = apiOptions.headers;
    let apiCatchErrors = apiOptions.catchErrors;
    if (autoTokenRefresh && !storage && window && window.localStorage) {
        storage = window.localStorage;
    }
    const auth = new auth_1.default(authOptions, storage, storageKey);
    if (autoTokenRefresh) {
        apiHeaders = () => {
            var _a, _b, _c;
            const authState = (_a = auth.storage) === null || _a === void 0 ? void 0 : _a.getState();
            if ((_b = authState) === null || _b === void 0 ? void 0 : _b.idToken) {
                return api_1.default.composeHeaders(apiOptions.headers, {
                    auth: `Bearer ${(_c = authState) === null || _c === void 0 ? void 0 : _c.idToken}`,
                });
            }
            return api_1.default.composeHeaders(apiOptions.headers);
        };
        apiCatchErrors = {
            [error_codes_1.default.TokenExpiredErrorCode]: (_error, rerun) => __awaiter(this, void 0, void 0, function* () {
                yield auth.refreshToken();
                return rerun();
            }),
        };
        if (typeof apiOptions.catchErrors === 'function') {
            apiCatchErrors.default = apiOptions.catchErrors;
        }
        else if (apiOptions.catchErrors) {
            apiCatchErrors = Object.assign(Object.assign({}, apiOptions.catchErrors), apiCatchErrors);
        }
    }
    const api = new api_1.default(Object.assign(Object.assign({}, apiOptions), { headers: apiHeaders, catchErrors: apiCatchErrors, workspaceId }));
    const extendedAuth = new ExtendedAuth_1.ExtendedAuth({
        api,
        auth,
        authProfileId: authOptions.settings.authProfileId,
    });
    return {
        api,
        auth: extendedAuth,
    };
}
exports.default = configureEightBase;
//# sourceMappingURL=configureEightBase.js.map