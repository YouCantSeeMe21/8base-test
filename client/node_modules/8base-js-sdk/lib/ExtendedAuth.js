"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@8base-js-sdk/api");
const graphql_1 = require("./graphql");
class ExtendedAuth {
    constructor(options) {
        const { api, auth, authProfileId } = options;
        this.api = api;
        this.auth = auth;
        this.authProfileId = authProfileId;
    }
    authorize(provider, options) {
        return this.auth.authorize(provider, options);
    }
    getAuthorizedData() {
        return this.auth.getAuthorizedData();
    }
    refreshToken() {
        return this.auth.refreshToken();
    }
    forgotPassword(email) {
        return this.auth.forgotPassword(email);
    }
    signOut(options) {
        return this.auth.signOut(options);
    }
    on(event, callback) {
        return this.auth.on(event, callback);
    }
    signIn(email, password) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const variables = {
                data: {
                    email,
                    password,
                    authProfileId: this.authProfileId,
                },
            };
            const result = yield this.api.request(graphql_1.USER_LOGIN_MUTATION, variables);
            if (api_1.ApiGraphQLError.hasError(result)) {
                throw new api_1.ApiGraphQLError({
                    query: graphql_1.USER_LOGIN_MUTATION,
                    variables,
                }, result);
            }
            if ((_c = (_b = (_a = result) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.userLogin) === null || _c === void 0 ? void 0 : _c.auth) {
                return result.data.userLogin.auth;
            }
            return null;
        });
    }
    signUp(user, password) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const variables = {
                authProfileId: this.authProfileId,
                user,
                password,
            };
            const result = yield this.api.request(graphql_1.USER_SIGN_UP_MUTATION, variables);
            if (api_1.ApiGraphQLError.hasError(result)) {
                throw new api_1.ApiGraphQLError({
                    query: graphql_1.USER_SIGN_UP_MUTATION,
                    variables,
                }, result);
            }
            if ((_b = (_a = result) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.userSignUpWithPassword) {
                return result.data.userSignUpWithPassword;
            }
            return null;
        });
    }
    signUpWithToken(user, token) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const variables = {
                authProfileId: this.authProfileId,
                user,
            };
            const fetchOptions = {
                headers: {
                    authorization: `Bearer ${token}`,
                },
            };
            const result = yield this.api.request(graphql_1.USER_SIGN_UP_WITH_TOKEN_MUTATION, variables, fetchOptions);
            if (api_1.ApiGraphQLError.hasError(result)) {
                throw new api_1.ApiGraphQLError({
                    query: graphql_1.USER_SIGN_UP_WITH_TOKEN_MUTATION,
                    variables,
                }, result);
            }
            if ((_b = (_a = result) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.userSignUpWithToken) {
                return result.data.userSignUpWithToken;
            }
            return null;
        });
    }
}
exports.ExtendedAuth = ExtendedAuth;
//# sourceMappingURL=ExtendedAuth.js.map